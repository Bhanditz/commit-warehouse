From af27ca8c91369837fa63053385e079ed945745b9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tim=20D=C3=BCsterhus?= <tim@bastelstu.be>
Date: Sun, 2 Aug 2015 23:55:40 +0200
Subject: [PATCH] Fix 'docker stop' issue

Docker runs processes inside a container with an isolated process tree.
Usually your daemon is the only process inside this container. This means
that it receives PID 1, being effectively init. This leads to the default
signal handlers of SIGTERM and SIGINT being ignored, which in turn causes
very slow stops of a container running spiped (it waits for the SIGKILL).

This commit explicitely bind a signal handler to SIGTERM and SIGINT if
spiped detects it is PID 1.
---
 spiped/main.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/spiped/main.c b/spiped/main.c
index ea42c9f..66d4690 100644
--- a/spiped/main.c
+++ b/spiped/main.c
@@ -1,4 +1,5 @@
 #include <inttypes.h>
+#include <signal.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -27,6 +28,18 @@ usage(void)
 	exit(1);
 }
 
+/*
+ * Signal handler for SIGTERM and SIGINT in case we are running
+ * inside a container as PID 1.
+ */
+static void
+diediedie_handler(int signo)
+{
+
+	(void)signo; /* UNUSED */
+	_exit(0);
+}
+
 /* Simplify error-handling in command-line parse loop. */
 #define OPT_EPARSE(opt, arg) do {					\
 	warnp("Error parsing argument: -%c %s", opt, arg);		\
@@ -198,6 +211,20 @@ main(int argc, char * argv[])
 		}
 	}
 
+	/* Check whether we are running as init (e.g., inside a container). */
+	if (getpid() == 1) {
+		/* https://github.com/docker/docker/issues/7086 */
+		warn0("WARNING: Applying workaround for Docker signal-handling bug");
+
+		/* Bind an explicit signal handler for SIGTERM and SIGINT. */
+		if (signal(SIGTERM, diediedie_handler) == SIG_ERR) {
+			warnp("Failed to bind SIGTERM signal handler");
+		}
+		if (signal(SIGINT, diediedie_handler) == SIG_ERR) {
+			warnp("Failed to bind SIGINT signal handler");
+		}
+	}
+
 	/* Daemonize early if we're going to wait for DNS to be ready. */
 	if (opt_D && !opt_F && daemonize(opt_p)) {
 		warnp("Failed to daemonize");
-- 
2.5.0

